const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/mapImageLayerUtils-B8GQeG6c.js","assets/utils-CAEJXYME.js","assets/index-DeoyqcX0.js","assets/index-q51HPNg-.css","assets/originUtils-Ci0NAHVX.js","assets/saveUtils-B_TeFvJn.js"])))=>i.map(i=>d[i]);
import{fg as w,fJ as O,fk as _,fv as $,fi as E,fj as P,fl as T,fh as A,fx as L,fw as M,fK as R,cX as F,_ as j,fL as y,bz as N,fG as v,ch as f,fM as V,fN as J,H as g,cq as q,A as U,fO as k,fP as z,s as b,a0 as G,fm as W,r as s,v as n,fQ as S,bx as B,B as D,fu as H,y as K,fR as Z}from"./index-DeoyqcX0.js";import{m as C,f as Q,a as X}from"./SublayersOwner-D8leeeQV.js";import{y as Y}from"./ExportImageParameters-CNuWOj0v.js";import{t as ee}from"./imageBitmapUtils-CrNHNZqa.js";import{e as x}from"./sublayerUtils-pck9GW0z.js";import"./QueryTask-Co_84a8M.js";import"./executeForIds-qqBrp_wh.js";import"./query-ChyFfTNF.js";import"./pbfQueryUtils-D3_YlP_r.js";import"./pbf-B_eiXSsB.js";import"./memoryEstimations-CZsmjxnE.js";import"./OptimizedFeature-DKoLIRUo.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./executeQueryJSON-CGkB6Z2-.js";import"./featureConversionUtils-ByczMuu5.js";import"./floorFilterUtils-DKzVzLpH.js";let r=class extends w(O(_(C(Q($(E(P(T(A(L(M(W)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new Y({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new R({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=F(async(t,l,i)=>{const{save:p,saveAs:o}=await j(()=>import("./mapImageLayerUtils-B8GQeG6c.js"),__vite__mapDeps([0,1,2,3,4,5]));switch(t){case y.SAVE:return p(this,l);case y.SAVE_AS:return o(this,i,l)}})}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(N).then(()=>this._fetchService(t))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const l=t.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,l,i){if(!this.loaded||!e)return;const p=e.slice().reverse().flatten(({sublayers:a})=>a&&a.toArray().reverse()).toArray();let o=!1;const m=v(i.origin);let h;if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(m===f.PORTAL_ITEM){const a=this.createSublayersForOrigin("service").sublayers;o=x(p,a,f.SERVICE)}else if(m>f.PORTAL_ITEM){const a=this.createSublayersForOrigin("portal-item");o=x(p,a.sublayers,v(a.origin)),h=a.originWithPartialOverrides}}const c=[],d={writeSublayerStructure:o,...i,minimumWritableOrigin:h};let u=o||this.hasVisibleLayersForOrigin(m);p.forEach(a=>{const I=a.write({},d);c.push(I),u=u||a.originOf("visible")==="user"}),c.some(a=>Object.keys(a).length>1)&&(t.layers=c),u&&(t.visibleLayers=p.filter(a=>a.visible).map(a=>a.id))}createExportImageParameters(e,t,l,i){const p=i?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=i?.floors??null,this._exportImageParameters.scale=V({extent:e,width:t})*p;const o=this._exportImageParameters.toJSON(),m=!i?.rotation||this.version<10.3?{}:{rotation:-i.rotation},h=e?.spatialReference,c=J(h);o.dpi*=p;const d={};if(i?.timeExtent){const{start:u,end:a}=i.timeExtent.toJSON();d.time=u&&a&&u===a?""+u:`${u??"null"},${a??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:c,imageSR:c,size:t+","+l,...o,...m,...d}}async fetchImage(e,t,l,i){const{data:p}=await this._fetchImage("image",e,t,l,i);return p}async fetchImageBitmap(e,t,l,i){const{data:p,url:o}=await this._fetchImage("blob",e,t,l,i);return ee(p,o,i?.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await g(this.url,t),{extent:i,fullExtent:p,timeExtent:o}=l,m=i||p;return{fullExtent:m&&U.fromJSON(m),timeExtent:o&&q.fromJSON({start:o[0],end:o[1]})}}loadAll(){return k(this,e=>{e(this.allSublayers),e(this.subtables)})}async save(e){return this._debouncedSaveOperations(y.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(y.SAVE_AS,t,e)}serviceSupportsSpatialReference(e){return z(this,e)}async _fetchImage(e,t,l,i,p){const o={responseType:e,signal:p?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,l,i,p),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(o.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query});try{const{data:h}=await g(m,o);return{data:h,url:m}}catch(h){throw G(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:l}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};s([n(S("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),s([n({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),s([n()],r.prototype,"dpi",void 0),s([n()],r.prototype,"elevationInfo",void 0),s([n()],r.prototype,"gdbVersion",void 0),s([n()],r.prototype,"imageFormat",void 0),s([B("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),s([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),s([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),s([n()],r.prototype,"imageTransparency",void 0),s([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),s([n({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),s([n({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([n({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),s([n(S("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),s([n()],r.prototype,"sourceJSON",void 0),s([n({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),s([D("sublayers",{layers:{type:[X]},visibleLayers:{type:[Z]}})],r.prototype,"writeSublayers",null),s([n({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],r.prototype,"listMode",void 0),s([n({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),s([n(H)],r.prototype,"url",void 0),r=s([K("esri.layers.MapImageLayer")],r);const ge=r;export{ge as default};
