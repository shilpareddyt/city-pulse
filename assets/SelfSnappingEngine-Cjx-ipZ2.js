import{cs as Z,mF as U,df as F,mG as B,mH as G,j3 as H,gE as I,gD as b,mI as Q,mJ as W,mK as X,i3 as Y,eP as ee,f6 as te,mL as se,cG as ie,a7 as re,r as L,v as T,y as ne}from"./index-DYh0j3Yd.js";import{f as z,o as A}from"./quantityUtils-BiKB93mz.js";import{j as u}from"./elevationInfoUtils-FeU_5j8e.js";import{p as y,N as f,n as _,s as l,o as M,b as C,m as J,q as R,M as K,J as oe,r as ae,I as q,e as D,k as he,t as de,j as ce,E as le}from"./hitTestSelectUtils-DD9Ie7HB.js";import{s as m,r as pe,g as ge,p as $,d as fe,o as ue,f as me}from"./RouteLayerInteraction-DSHSsJ6e.js";import"./projectVectorToVector-BhjqnWed.js";import"./projectPointToVector-qiLTYw2x.js";import"./geodesicUtils-8I_r8RxE.js";import"./plane-hKQVZa5I.js";import"./vectorStacks-CwFLufb-.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-BAT34mcJ.js";import"./spatialReferenceEllipsoidUtils-BFfnP1st.js";import"./Stop-xuRnDnLl.js";import"./networkEnums-DQqkJbem.js";import"./geodeticLengthOperator-uHsHjh1Y.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-n70zgMrz.js";import"./lineSegment-BxI-eF9_.js";class k{constructor(s,e){this.view=s,this.options=e,this.squaredShortLineThreshold=y.shortLineThreshold*y.shortLineThreshold}snap(s,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(s,e):this.snapNewVertex(s,e)}edgeExceedsShortLineThreshold(s,e){return this.exceedsShortLineThreshold(f(s.leftVertex.pos,this.view,e),f(s.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(s,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||_(m(e,t,u,this.view),m(s,t,u,this.view))>this.squaredShortLineThreshold}isVertical(s,e,{spatialReference:t}){const i=Z(t);return U(l(s),l(e))*i<y.verticalLineThresholdMeters}squaredProximityThreshold(s){return s==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:s,touchSensitivityMultiplier:e}=this.options,t=s*e;return t*t}}class xe extends k{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=[];if(i<1)return r;const{spatialReference:n}=e,a=m(s,n,u,this.view),{view:o}=this,h=t.edges[i-1];let d=h;do{if(this.edgeExceedsShortLineThreshold(d,e)){const p=M(d,o,e);this._processCandidateProposal(p.left,p.right,s,a,e,r)}d=d.leftVertex.leftEdge}while(d&&d!==h);return r}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2)return t;const{view:n}=this,{spatialReference:a}=e,o=m(s,a,u,n),h=i.leftEdge,d=i.rightEdge;h&&d&&this.edgeExceedsShortLineThreshold(h,e)&&this.edgeExceedsShortLineThreshold(d,e)&&this._processCandidateProposal(f(h.leftVertex.pos,n,e),f(d.rightVertex.pos,n,e),s,o,e,t);const p=r.edges[0];let g=p;do{if(g!==i.leftEdge&&g!==i.rightEdge&&this.edgeExceedsShortLineThreshold(g,e)){const x=M(g,n,e);this._processCandidateProposal(x.left,x.right,s,o,e,t)}g=g.rightVertex.rightEdge}while(g&&g!==p);return t}_processCandidateProposal(s,e,t,i,r,n){const{spatialReference:a,pointer:o}=r,h=F();ve(h,s,e,t,r,this._geodesicLengthMeasurementUtils);const d=C(J(h));_(i,m(d,a,u,this.view))<this.squaredProximityThreshold(o)&&n.push(new pe({lineStart:s,lineEnd:e,targetPoint:d,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}function ve(c,s,e,t,i,r){Ee(c,s,e,t,i,r)||we(c,t,s,e)}function Ee(c,s,e,t,{spatialReference:i},r){const n=R(s,e,i,i);if(n==null)return!1;const a=R(e,t,i,i);if(a==null)return!1;const o=r.geodesicDistance(e,t,i);if(o==null)return!1;const h=Math.abs(B.shortestSignedDiff(n,a))>Math.PI/2?G.normalize(n+Math.PI):n;return K(c,e,i,z(o,"meters"),A(h,"radians","geographic"),"geodesic"),c[2]=t[2],!0}function we(c,s,e,t){oe(s,{start:e,end:t,type:ae.LINE},c),c[2]=s[2]}let Ve=class extends k{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=t.vertices.length,n=[];if(i<2)return n;const{view:a}=this,o=m(s,e.spatialReference,u,a),h=f(t.vertices[r-1].pos,a,e),d=f(t.vertices[0].pos,a,e),p=t.edges[i-1];let g=p;do{if(this.edgeExceedsShortLineThreshold(g,e)){const x=M(g,a,e);this._checkEdgeForParallelLines(x,h,s,o,e,n),this._checkEdgeForParallelLines(x,d,s,o,e,n)}g=g.leftVertex.leftEdge}while(g&&g!==p);return n}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<3)return t;const{view:n}=this,a=m(s,e.spatialReference,u,n),o=i.leftEdge,h=i.rightEdge,d=r.vertices[0],p=f(d.pos,n,e),g=r.vertices.length,x=r.vertices[g-1],V=f(x.pos,n,e),P=r.edges[0];let v=P;do{if(v!==o&&v!==h&&this.edgeExceedsShortLineThreshold(v,e)){const S=M(v,n,e);o&&this._checkEdgeForParallelLines(S,f(o.leftVertex.pos,n,e),s,a,e,t),h&&this._checkEdgeForParallelLines(S,f(h.rightVertex.pos,n,e),s,a,e,t),i===d?this._checkEdgeForParallelLines(S,V,s,a,e,t):i===x&&this._checkEdgeForParallelLines(S,p,s,a,e,t)}v=v.rightVertex.rightEdge}while(v&&v!==P);return t}_checkEdgeForParallelLines(s,e,t,i,r,n){const a=s.left,o=s.right;if(q(E,l(e),l(a),l(o)),H(E,l(e))<y.parallelLineThreshold)return;q(E,l(t),l(a),l(o),l(e));const{spatialReference:h,pointer:d}=r,p=C(D(E[0],E[1],t[2]));if(_(i,m(p,h,u,this.view))<this.squaredProximityThreshold(d)){if(this.isVertical(p,e,r)||this.isVertical(a,o,r)||Le(s,n))return;n.push(new ge({referenceLine:s,lineStart:e,targetPoint:p,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}};function Le(c,s){const e=c.left,t=c.right;for(const i of s)if(q(E,l(t),l(i.constraint.start),l(i.constraint.end),l(e)),H(E,l(t))<y.parallelLineThreshold)return i.addReferenceLine(c),!0;return!1}const E=I();class ye extends k{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[];if(t.vertices.length<2)return i;const{view:r}=this,n=m(s,e.spatialReference,u,r),a=t.vertices.at(-1);this._checkForSnappingCandidate($.LastVertex,i,a.leftEdge,a,a.leftEdge.leftVertex,s,n,e);const o=t.vertices[0];return this._checkForSnappingCandidate($.FirstVertex,i,o.rightEdge,o,o.rightEdge.rightVertex,s,n,e),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle;if(i.component.vertices.length<3)return t;const{view:r}=this,n=m(s,e.spatialReference,u,r),a=i.leftEdge,o=i.rightEdge;if(a?.leftVertex.leftEdge){const h=a.leftVertex.leftEdge;this._checkForSnappingCandidate($.ExistingEdge,t,h,h.rightVertex,h.leftVertex,s,n,e)}if(o?.rightVertex.rightEdge){const h=o.rightVertex.rightEdge;this._checkForSnappingCandidate($.ExistingEdge,t,h,h.leftVertex,h.rightVertex,s,n,e)}return t}_checkForSnappingCandidate(s,e,t,i,r,n,a,o){if(!this.edgeExceedsShortLineThreshold(t,o))return;const h=this.view,d=f(i.pos,h,o),p=f(r.pos,h,o);_e(N,p,d,n,o,this._geodesicLengthMeasurementUtils),this._checkForSnappingCandidateAlongProjectedRay(s,e,p,d,N,n,a,o)}_checkForSnappingCandidateAlongProjectedRay(s,e,t,i,r,n,a,o){const{spatialReference:h,pointer:d}=o,p=b(j,l(n),l(i)),g=Q(r,p)/W(r),x=X(j,l(i),r,g),V=C(D(x[0],x[1],n[2]));if(_(a,m(V,h,u,this.view))>this.squaredProximityThreshold(d)||this.isVertical(V,i,o)||this.isVertical(i,t,o))return;const P=Y(F(),i,r,Math.sign(g));e.push(new fe({targetPoint:V,constraint:new he(i,J(P)),previousVertex:t,otherVertex:i,otherVertexType:ue.CENTER,selfSnappingType:s,isDraped:o.elevationInfo?.mode==="on-the-ground"}))}}function _e(c,s,e,t,i,r){Pe(c,s,e,t,i,r)||Se(c,s,e)}function Pe(c,s,e,t,{spatialReference:i},r){const n=R(s,e,i,i);if(n==null)return!1;const a=R(e,t,i,i);if(a==null)return!1;const o=Math.sign(G.shortestSignedDiff(n,a))*Math.PI*.5,h=A(n+o,"radians","geographic"),d=F(),p=r.geodesicDistance(e,t,i);return p!=null&&(K(d,e,i,z(p,"meters"),h,"geodesic"),ee(c,d,e),!0)}function Se(c,s,e){const t=b(j,l(e),l(s));te(c,t[1],-t[0],0)}const j=I(),N=F();let Te=class extends k{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[],r=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||r<2)return i;const{view:n}=this,a=t.vertices[0],o=t.vertices[r-1],h=f(a.pos,n,e),d=f(o.pos,n,e);return this._processCandidateProposal(h,d,s,e,i),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(i.index===0||i.index===r.vertices.length-1))return t;const{view:n}=this,a=f(i.leftEdge.leftVertex.pos,n,e),o=f(i.rightEdge.rightVertex.pos,n,e);return this._processCandidateProposal(a,o,s,e,t),t}_processCandidateProposal(s,e,t,i,r){if(!this.exceedsShortLineThreshold(s,e,i))return;const n=se(O,l(s),l(e),.5),a=.5*U(l(s),l(e)),o=de(O,l(t),n,a),h=C(D(o[0],o[1],t[2])),{spatialReference:d,pointer:p}=i,g=m(t,d,u,this.view);if(_(g,m(h,d,u,this.view))<this.squaredProximityThreshold(p)){if(this.isVertical(s,h,i)||this.isVertical(h,e,i))return;r.push(new me({targetPoint:h,point1:s,point2:e,isDraped:i.elevationInfo?.mode==="on-the-ground"}))}}};const O=I();let w=class extends ie{constructor(c){super(c),this.updating=!1,this._snappers=new re,this._domain=ce.SELF}initialize(){this._snappers.push(new Ve(this.view,this.options),new xe(this.view,this.options,this.geodesicLengthMeasurementUtils),new ye(this.view,this.options,this.geodesicLengthMeasurementUtils),new Te(this.view,this.options))}set options(c){this._set("options",c);for(const s of this._snappers)s.options=c}async fetchCandidates(c,s,e){if(!(s&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const i of this._snappers.items)for(const r of i.snap(c,e))t.push(r);return le(c,t),t}};L([T({readOnly:!0})],w.prototype,"updating",void 0),L([T({constructOnly:!0})],w.prototype,"view",void 0),L([T({constructOnly:!0})],w.prototype,"geodesicLengthMeasurementUtils",void 0),L([T()],w.prototype,"options",null),w=L([ne("esri.views.interactive.snapping.SelfSnappingEngine")],w);export{w as SelfSnappingEngine};
