import{gB as c,ae as x}from"./index-BOwmS6EZ.js";import{w as d,j as g}from"./operatorOffset-BQmmnI5h.js";import{getSpatialReference as f,fromGeometry as y,toGeometry as u,fromGeometries as G}from"./jsonConverter-DLzl0R6t.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./ProjectionTransformation-Cw4mm0N7.js";import"./Envelope2D-DM-TR0g7.js";import"./Point2D-DKT_pVCB.js";import"./Transformation2D-BY72LdYb.js";import"./OperatorDefinitions-DP7_WWTp.js";const l={round:0,bevel:1,miter:2,square:3};function w(t,e,n={}){const{miterLimit:a=10,flattenError:s=0,joins:p="round",unit:r}=n,o=f(t);r&&o&&(e=c(e,r,o));const m=y(t),i=m.getSpatialReference();return u(d(m.getGeometry(),i,e,l[p],a,s),i)}function I(t,e,n={}){const{miterLimit:a=10,flattenError:s=0,joins:p="round",unit:r}=n,o=f(t);r&&o&&(e=c(e,r,o));const[m,i]=G(t);return g(m,i,e,l[p],a,s).map(j=>u(j,i)).filter(x)}export{w as execute,I as executeMany};
