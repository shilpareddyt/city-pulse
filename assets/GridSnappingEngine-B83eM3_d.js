import{cG as V,dN as U,gM as E,e$ as F,gN as X,a3 as Y,b1 as D,gO as N,gP as G,r as o,v as p,y as W}from"./index-DeoyqcX0.js";import{l as H,u as I,t as T}from"./gridUtils-C84WttJN.js";import{f as d,d as _,c as k}from"./hitTestSelectUtils-BYhP2zpS.js";import{r as j,a as q}from"./RouteLayerInteraction-DehuUBly.js";import"./geodesicUtils-pcl4mb3J.js";import"./quantityUtils-C5_e2YKg.js";import"./projectVectorToVector-B1dE07ii.js";import"./projectPointToVector-c7AnZWrG.js";import"./plane-ByCiiyZp.js";import"./vectorStacks-D0zH0LBx.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-vSmD8aCq.js";import"./elevationInfoUtils-CK0stuhE.js";import"./spatialReferenceEllipsoidUtils-BpmeAaBX.js";import"./Stop-DXJs0OKB.js";import"./networkEnums-C6y15jTD.js";import"./geodeticLengthOperator-Bebl119v.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-DWCdBRma.js";import"./lineSegment-DlLSx8Uw.js";let s=class extends V{constructor(e){super(e),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){return this.grid?.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){return U(this.grid?.rotation??0)}get gridCenter(){const{spatialReference:e,grid:r}=this;if(!r||!e||!E(r.center.spatialReference,e))return null;try{const t=F(r.center,e),i=e.isWrappable&&this.view?.center!=null?X(t.x,this.view.center.x,e):t.x;return d(i,t.y,t.z)}catch(t){return Y.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",t),null}}get offsetScaleFactor(){const{pixelsPerStride:e,grid:r}=this;if(!r||!e)return 1;const{majorLineInterval:t,dynamicScaling:i}=r;return t<1?null:H(t,e,i)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:e}=this;return e?D(e.spacing,e.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:e}=this;return e==null?null:e*N(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:e}=this.view;return this.gridCenter?I(this.gridCenter[0],this.gridCenter[1],e):null}get pixelsPerStride(){const{gridMetersPerStride:e,viewMetersPerPixel:r}=this;return r&&e?e/r:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(e,r,t){const{options:i,view:n}=this;if(!i?.effectiveGridEnabled||!n.grid||t.feature?.attributes&&_ in t.feature.attributes)return[];const a=t.coordinateHelper.arrayToPoint(e),l=i.distance*(t.pointer==="touch"?i.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(a,l)}fetchCandidatesSync(e,r){const t=[],{grid:i,effectiveViewRotation:n,gridRotation:a,gridCenter:l,viewMetersPerPixel:m,viewMetersPerSRUnit:g,offsetScaleFactor:S,spatialReference:f,gridMetersPerStride:$,pixelsPerStride:C}=this;if(!(i&&m&&g&&l&&f&&S&&$&&C)||!i.dynamicScaling&&C<T||!E(e.spatialReference,f))return t;const y=F(e,f),z=d(y.x,y.y,y.z),u=h(z,-a,l,-n),P=$/g*S,c=A(u,P,l),{shouldSnapX:v,shouldSnapY:w}=B(c,u,r,m,g);if(!v&&!w)return[];const L=d((v?c:u)[0],(w?c:u)[1]),M=h(L,a,l,n),b=h(c,a,l,n);if(w){const R=O(c,u,P,"y"),x=h(R,a,l,n);t.push(new j({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}if(v){const R=O(c,u,P,"x"),x=h(R,a,l,n);t.push(new j({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}return v&&w&&t.push(new q(M,t[0],t[1],!1)),t}};o([p({constructOnly:!0})],s.prototype,"view",void 0),o([p()],s.prototype,"options",void 0),o([p()],s.prototype,"grid",null),o([p()],s.prototype,"effectiveViewRotation",null),o([p()],s.prototype,"gridRotation",null),o([p()],s.prototype,"gridCenter",null),o([p()],s.prototype,"offsetScaleFactor",null),o([p()],s.prototype,"spatialReference",null),o([p()],s.prototype,"gridMetersPerStride",null),o([p()],s.prototype,"viewMetersPerPixel",null),o([p()],s.prototype,"viewMetersPerSRUnit",null),o([p()],s.prototype,"pixelsPerStride",null),o([p()],s.prototype,"updating",null),s=o([W("esri.views.interactive.snapping.GridSnappingEngine")],s);const h=(e,r,t,i)=>{const n=k(e[0],e[1],e[2]);return G(n,G(n,n,t,r),t,i)},A=(e,r,t)=>{const i=(e[0]-t[0])/r,n=(e[1]-t[1])/r,a=Math.trunc(i),l=Math.trunc(n),m=Math.round(i%1),g=Math.round(n%1),S=t[0]+(a+m)*r,f=t[1]+(l+g)*r;return d(S,f)},B=(e,r,t,i,n)=>{if(i<=0)return{shouldSnapX:!1,shouldSnapY:!1};const a=(e[0]-r[0])/i,l=(e[1]-r[1])/i;return{shouldSnapX:Math.abs(a*n)<t,shouldSnapY:Math.abs(l*n)<t}},O=(e,r,t,i)=>{if(i==="y"){const a=r[0]>e[0]?1:-1;return d(e[0]+t*a,e[1])}const n=r[1]>e[1]?1:-1;return d(e[0],e[1]+t*n)};export{s as GridSnappingEngine};
