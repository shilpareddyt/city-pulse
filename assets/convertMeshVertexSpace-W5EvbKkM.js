import{bq as p,s as m,aA as s}from"./index-Cyz3pbfr.js";import{p as n}from"./MeshVertexAttributes-DbDB7gzV.js";import{B as a}from"./vertexSpaceConversion-B-r3PfQS.js";import"./meshProperties-B4vupnXI.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-DUC5NsWN.js";import"./computeTranslationToOriginAndRotation-D5TPmOB0.js";import"./projectPointToVector-D8SK5Cnb.js";import"./meshVertexSpaceUtils-CVE8RHd_.js";import"./MeshLocalVertexSpace-BwKLfHmw.js";import"./vec3-BiOhQACd.js";import"./BufferView-CRg47Hq8.js";import"./vec4-DQJT7k6n.js";async function E(t,r,o){await Promise.resolve(),p(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),r);return i.transform=null,i}export{E as convertMeshVertexSpace};
