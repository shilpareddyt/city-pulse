import{gg as d,a3 as h,e9 as l,A as S,a6 as g,f as N,ad as D}from"./index-CLxXbLZV.js";import E from"./Mesh-C2dbEWAz.js";import{n as M,i as F}from"./External-BP6tHmpE.js";import{n as T,i as I}from"./meshFeatureAttributes-C-hWoDbl.js";import"./axisAngleDegrees-DdwcwKM_.js";import"./quat-DFaPWhch.js";import"./mat3f64-B5o_lm6j.js";import"./quatf64-aQ5IuZRd.js";import"./MeshComponent-B-fzkE2b.js";import"./meshProperties-B4vupnXI.js";import"./MeshLocalVertexSpace-DnHlq27M.js";import"./MeshTransform-C7VUXxbo.js";import"./mat4f64-q_b6UJoq.js";import"./MeshVertexAttributes-yTSOcCc9.js";import"./meshVertexSpaceUtils-obKbGR-e.js";import"./triangulationUtils-CTM-tHsL.js";import"./earcut-D9gy186-.js";import"./Indices-uDidBzTq.js";import"./plane-DQYGosfF.js";import"./vectorStacks-q0AdHaGc.js";import"./deduplicate-B6jjZqCJ.js";import"./projectPointToVector-D5WXqFwu.js";import"./vertexSpaceConversion-Brjl9iMa.js";import"./spatialReferenceEllipsoidUtils-De0UU5eG.js";import"./computeTranslationToOriginAndRotation-BAQJDYyr.js";import"./vec3-jifWFTEa.js";import"./BufferView-CAXX2FWE.js";import"./vec4-BrBcjWwT.js";const w=()=>h.getLogger("esri.rest.support.meshFeatureSet");function at(t,s,e){const r=e.features;e.features=[],delete e.geometryType;const o=g.fromJSON(e);if(o.geometryType="mesh",!e.assetMaps)return o;const n=$(s,e.assetMaps),i=t.sourceSpatialReference??N.WGS84,m=e.globalIdFieldName,{outFields:a}=t,f=a!=null&&a.length>0?L(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const p=O(u,m,i,s,n);o.features.push(new D({geometry:p,attributes:f(u)}))}return o}function L(t){return({attributes:s})=>{if(!s)return{};if(!t)return s;for(const e in s)t.has(e)||delete s[e];return s}}function O(t,s,e,r,o){const n=t.attributes[s],i=o.get(n);if(i==null||!t.geometry)return null;const m=T(t.attributes,e,r.transformFieldRoles),a=S.fromJSON(t.geometry);a.spatialReference=e;const f=I(t.attributes,r.transformFieldRoles),u=e.isGeographic?"local":"georeferenced",p=b(i);return p?E.createWithExternalSource(m,p,{extent:a,transform:f,vertexSpace:u,unitConversionDisabled:!0}):E.createIncomplete(m,{extent:a,transform:f,vertexSpace:u})}var c;function $(t,s){const e=new Map;for(const r of s){const o=r.parentGlobalId;if(o==null)continue;const n=r.assetName,i=r.assetType,m=r.assetHash,a=r.assetURL,f=r.conversionStatus,u=r.seqNo,p=d(i,t.supportedFormats);if(!p){w().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const y=l(e,o,()=>({files:new Map}));l(y.files,n,()=>({name:n,type:i,mimeType:p,status:P(f),parts:[]})).parts[u]={hash:m,url:a}}return e}function b(t){const s=Array.from(t.files.values()),e=new Array;for(const r of s){if(r.status!==c.COMPLETED)return null;const o=new Array;for(const n of r.parts){if(!n)return null;o.push(new M(n.url,n.hash))}e.push(new F(r.name,r.mimeType,o))}return{type:"service",assets:e}}function P(t){switch(t){case"COMPLETED":case"SUBMITTED":return c.COMPLETED;case"INPROGRESS":return c.PENDING;default:return c.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(c||(c={}));export{$ as assetMapFromAssetMapsJSON,O as extractMesh,at as meshFeatureSetFromJSON};
