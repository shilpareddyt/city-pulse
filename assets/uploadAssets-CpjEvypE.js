import{bi as v,e9 as Z,at as A,Z as Q,lH as I,lI as N,bt as h,H as m,bq as l,c$ as X,lJ as Y,lK as ee,lL as se,d3 as te,d1 as oe,lM as re,f as ne,gg as ae,bz as ie,db as ce,a3 as le}from"./index-Cyz3pbfr.js";import{f as ue,b as pe,y as fe,i as _,n as x}from"./External-CznaKNqU.js";import{r as me,n as de,t as ge,l as he,c as E,a as ye,b as we,d as be,u as Pe,p as Te}from"./meshSpatialReferenceScaleUtils-DCOa2UmR.js";import{i as ve,n as Ae}from"./meshFeatureAttributes-B-BCEcFY.js";import"./MeshTransform-BmLqAtTg.js";import"./mat4f64-q_b6UJoq.js";import"./quat-N2rDmuLZ.js";import"./mat3f64-B5o_lm6j.js";import"./quatf64-aQ5IuZRd.js";import"./axisAngleDegrees-Dvl-yl-J.js";const $={uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function y(t,e=o=>{},s){return new $e(t,e,s)}let $e=class{constructor(e,s=r=>{},o){if(this.onProgress=s,this.taskName=o,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof e=="number"){this._weights={};for(let r=0;r<e;r++){const n=r,a=1/e;this._weights[n]=a,this._progressMap.set(n,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,o]of this._progressMap.entries())e+=o*this._weights[s];if(e===1&&v("enable-feature:esri-3dofl-upload-timings")){const s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(const[o,r]of this._timingsMap){const n=Math.round(r.end-r.start)/1e3,a=Math.round(n/s*100);console.log(this.taskName??"Task",{stepKey:o,stepTime:n,relativeTime:a})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),v("enable-feature:esri-3dofl-upload-timings")){const o=performance.now();this._startTime??=o;const r=Z(this._timingsMap,e,()=>({start:o,end:0}));s===1&&(r.end=o)}this.emitProgress()}simulate(e,s){return R(o=>this.setProgress(e,o),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}};function R(t=s=>{},e=Ie){const s=performance.now();t(0);const o=setInterval(()=>{const r=performance.now()-s,n=1-Math.exp(-r/e);t(n)},De);return Q(()=>{clearInterval(o),t(1)})}function Me(t,e=Fe){return I(N(t*k/e))}function je(t,e=Se){return I(N(t*k/e))}const Fe=10,Se=10,k=8e-6,De=A(50),Ie=A(1e3),C=1e6,D=20*C,Ne=2e9,_e=3;async function xe({data:t,name:e,description:s},o,r){let n=null;try{const a=h(o,"uploads"),i=h(a,"info"),{data:u}=await m(i,{query:{f:"json"},responseType:"json"});l(r);const d=X(o),g=u.maxUploadFileSize*C,f=d?Ne:g,c=d?Math.min(D,g):D;if(t.size>f)throw new Error("Data too large");const z=h(a,"register"),{data:M}=await m(z,{query:{f:"json",itemName:Ee(e),description:s},responseType:"json",method:"post"});if(l(r),!M.success)throw new Error("Registration failed");const{itemID:L}=M.item;n=h(a,L);const H=h(n,"uploadPart"),j=Math.ceil(t.size/c),w=new Array;for(let p=0;p<j;++p)w.push(t.slice(p*c,Math.min((p+1)*c,t.size)));const b=w.slice().reverse(),F=new Array,J=y(j,r?.onProgress,"uploadItem"),G=async()=>{for(;b.length!==0;){const p=w.length-b.length,P=b.pop(),T=new FormData,V=J.simulate(p,Me(P.size));try{T.append("f","json"),T.append("file",P),T.append("partId",`${p}`);const{data:W}=await m(H,{timeout:0,body:T,responseType:"json",method:"post"});if(l(r),!W.success)throw new Error("Part upload failed")}finally{V.remove()}}};for(let p=0;p<_e&&b.length!==0;++p)F.push(G());await Promise.all(F);const K=h(n,"commit"),{data:S}=await m(K,{query:{f:"json",parts:w.map((p,P)=>P).join(",")},responseType:"json",method:"post"});if(l(r),!S.success)throw new Error("Commit failed");return S.item}catch(a){if(n!=null){const i=h(n,"delete");await m(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function Ee(t){return t.replaceAll("/","_").replaceAll("\\","_")}async function ms(t,e,s){const o=t.length;if(!o)return s?.onProgress?.(1),[];const r=y(o,s?.onProgress,"uploadAssets");return Promise.all(t.map((n,a)=>Re(n,e,{...s,onProgress:r.makeOnProgress(a)})))}async function Re(t,{layer:e,ongoingUploads:s},o){const r=s.get(t);if(r)return r;if(!Ye(e))throw new me;if(ke(t,e))return o?.onProgress?.(1),t;const n=Ce(t,e,o);s.set(t,n);try{await n}finally{s.delete(t)}return t}function ke(t,e){const{parsedUrl:s}=e;return s!=null&&t.metadata.externalSources.some(o=>ue(o,s))}async function Ce(t,e,s){const{metadata:o}=t,{displaySource:r}=o,n=U(r?.source,e,{checkForConversionRequired:v("enable-feature:georeferenced-uploads")}),a=n!=null?Ue(n,e,s):o.externalSources.length>0?qe(t,e,s):Oe(t,e,s),i=await a;return l(s),t.addExternalSources([i]),t}async function Ue(t,e,s){return{source:{type:"service",assets:await q(t,e,s)},original:!0,unitConversionDisabled:!0}}async function qe(t,e,s){const o=B(e),{externalSources:r}=t.metadata,n=ze(r,e);if(!n)throw new de;const a=y($.uploadConvertibleSource,s?.onProgress,"uploadConvertibleSource"),i={type:"service",assets:await q(n,e,{onProgress:a.makeOnProgress("uploadEditSource")})};t.addExternalSources([{source:i,original:!0}]);const u=n.reduce((g,{asset:f})=>f instanceof File?g+f.size:g,0),d=a.simulate("serviceAssetsToGlb",je(u));try{const{source:g,transform:f,origin:c}=await We(i,e,o);return t.transform=f,c&&(t.metadata.georeferenced=!0,s?.useAssetOrigin&&(t.vertexSpace.origin=[c.x,c.y,c.z??0],t.spatialReference=c.spatialReference)),{source:g,unitConversionDisabled:!0}}finally{d.remove()}}async function Oe(t,e,s){const o=y($.uploadLocalMesh,s?.onProgress,"uploadLocalMesh"),r=Be(t,e,{...s,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:{type:"service",assets:await O([r],e,{...s,onProgress:o.makeOnProgress("uploadAssetBlobs")})},extent:t.extent.clone(),original:!0}}async function Be(t,e,s){const o=B(e),r=await t.load(s),n=await r.toBinaryGLTF({origin:r.origin,signal:s?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return l(s),{blob:new Blob([n],{type:"model/gltf-binary"}),assetName:`${te()}.glb`,assetType:o}}function ze(t,e){for(const s of t){const o=U(s.source,e);if(o)return o}return null}function U(t,{infoFor3D:e},s={}){if(!t)return null;const o=pe(t);if(!o)return null;const{supportedFormats:r,editFormats:n}=e,a=new Array,i=Y(e),u=ee(e);let d=!1;for(const g of o){const f=Le(g,r);if(!f)return null;const{assetType:c}=f;if(s.checkForConversionRequired&&(c===i||c===u))return null;n.includes(c)&&(d=!0),a.push(f)}return d?a:null}function Le(t,e){const s=fe(t,e);return s?{asset:t,assetType:s}:null}async function q(t,e,s){return O(t.map(o=>He(o,s)),e,s)}async function O(t,e,s){const o=y($.uploadAssetBlobs,s?.onProgress,"uploadAssetBlobs"),r=await Ge(t,e,{...s,onProgress:o.makeOnProgress("prepareAssetItems")});l(s);const n=r.map(({item:i})=>i),{uploadResults:a}=await Ke(n,e,{...s,onProgress:o.makeOnProgress("uploadAssetItems")});return l(s),t.map((i,u)=>Ve(r[u],a[u],e))}async function He(t,e){const{asset:s,assetType:o}=t;if(s instanceof File)return{blob:s,assetName:s.name,assetType:o};const r=await s.toBlob(e);return l(e),{blob:r,assetName:s.assetName,assetType:o}}async function Je(t,e,s){const{blob:o,assetType:r,assetName:n}=t;let a=null;try{const i=await xe({data:o,name:n},e.url,s);l(s),a={assetType:r,assetUploadId:i.itemID}}catch(i){ie(i),es().warnOnce(`Service ${e.url} does not support the REST Uploads API.`)}if(!a){const i=await ce(o);if(l(s),!i.isBase64)throw new Pe;a={assetType:r,assetData:i.data}}if(!a)throw new Te;return{item:a,assetName:n}}function Ge(t,e,s){const o=y(t.length,s?.onProgress,"prepareAssetItems");return Promise.all(t.map(async(r,n)=>{const a=Je(await r,e,{...s,onProgress:o.makeOnProgress(n)});return l(s),a}))}async function Ke(t,e,s){const o=R(s?.onProgress);try{const r=await m(h(e.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(t)},method:"post",responseType:"json"});if(l(s),r.data.uploadResults.length!==t.length)throw new we(t.length,r.data.uploadResults.length);return r.data}finally{o.remove()}}function Ve(t,e,s){const{success:o}=e;if(!o){const{error:d}=e;throw new be(t.assetName,d)}const{assetHash:r}=e,{assetName:n,item:{assetType:a}}=t,{infoFor3D:{supportedFormats:i}}=s,u=ae(a,i);if(!u)throw new E(a);return new _(n,u,[new x(`${s.parsedUrl.path}/assets/${r}`,r)])}async function We({assets:t},e,s){const o=t.map(({assetName:n,parts:a})=>({assetName:n,assetHash:a[0].partHash}));let r;try{const n=h(e.parsedUrl.path,"convert3D"),a=e.capabilities?.operations.supportsAsyncConvert3D;r=(await(a?Xe:Qe)(n,{query:{f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:s,async:a},responseType:"json",timeout:0})).data}catch{throw new he}return Ze(e,r)}function Ze(t,e){const s={source:{type:"service",assets:e.assets.map(o=>{const r=re(o.contentType,t.infoFor3D.supportedFormats);if(!r)throw new E(r);return new _(o.assetName,o.contentType,[new x(o.assetURL,o.assetHash)])})},origin:void 0,transform:void 0};if(v("enable-feature:georeferenced-uploads")&&e.transform){if(s.transform=ve(e.transform),e.spatialReference){const o=ne.fromJSON(e.spatialReference);s.origin=Ae(e.transform,o)}}else s.transform=ye(t.spatialReference);return s}function Qe(t,e){return m(t,e)}async function Xe(t,e){const s=(await m(t,e)).data.statusUrl;for(;;){const o=(await m(s,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return m(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await oe(ss)}}function Ye(t){return!!t.infoFor3D&&!!t.url}function B({infoFor3D:t}){const e=se(t);if(!e)throw new ge;return e}function es(){return le.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const ss=A(1e3);export{ms as uploadAssets};
