import{a4 as s,a5 as n,bi as d,r as u,y as l}from"./index-DeoyqcX0.js";import{c as g}from"./FeatureLayerView2D-CU43-Yim.js";import"./Container-2rUsmYP5.js";import"./featureConversionUtils-ByczMuu5.js";import"./OptimizedFeature-DKoLIRUo.js";import"./memoryEstimations-CZsmjxnE.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./timeSupport-DNQ9p_60.js";import"./AttributeBinsFeatureSet-D3JpdBZE.js";import"./AttributeBinsQuery-DoCEyVyV.js";import"./queryUtils-BI4AyuF2.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-NnwlOGeD.js";import"./LayerView-JsDCIYx1.js";import"./layerViewUtils-Dc-kY2uK.js";import"./TechniqueInstance-X_d75uKO.js";import"./UpdateTracking2D-CvXNcdpU.js";import"./BidiEngine-QXap_35O.js";import"./GeometryUtils-nFMAd0HX.js";import"./rasterizingUtils-CBvlbWXI.js";import"./floatRGBA-CGz6COIM.js";import"./Rect-CUzevAry.js";import"./Utils-oPmT1Zkc.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-C6T3TLX9.js";import"./ProgramTemplate-B4_WNuZC.js";import"./TileContainer-B_dyO7Iv.js";import"./WGLContainer-rXBoYh6B.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-CPxLiBAn.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-BC04KMP-.js";import"./TechniqueType-CFPo0AVB.js";import"./GraphShaderModule-DPbIYxgp.js";import"./ShaderBuilder-xfqM8Zmu.js";import"./BindType-BBwFZqyN.js";import"./utils-DxwbXqiF.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-DvTdCyec.js";import"./CircularArray-CujHzHWW.js";import"./SDFHelper-Clav0F1P.js";import"./constants-B4mRqufT.js";import"./bundle-D2hyHz7d.js";import"./floorFilterUtils-DKzVzLpH.js";import"./popupUtils-Dln9B2M_.js";import"./RefreshableLayerView-Bq6Lk2m6.js";let i=class extends g{initialize(){this.addHandles([s(()=>this.view.scale,()=>this._update(),n)],"constructor")}isUpdating(){const t=this.layer.sublayers.some(a=>a.renderer!=null),r=this._commandsQueue.updateTracking.updating,o=this._updatingRequiredPromise!=null,p=!this._workerProxy,m=this.dataUpdating,e=t&&(r||o||p||m);return d("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${e}
  -> hasRenderer ${t}
  -> hasPendingCommand ${r}
  -> updatingRequiredFields ${o}
  -> updatingProxy ${p}
  -> updatingPipeline ${m}
`),e}};i=u([l("esri.views.2d.layers.SubtypeGroupLayerView2D")],i);const si=i;export{si as default};
