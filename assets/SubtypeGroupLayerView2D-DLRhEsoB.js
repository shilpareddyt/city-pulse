import{a4 as s,a5 as n,bi as d,r as u,y as l}from"./index-Cyz3pbfr.js";import{c as g}from"./FeatureLayerView2D-PQmPfDaf.js";import"./Container-DfYkluiO.js";import"./featureConversionUtils-CcUlKWCC.js";import"./OptimizedFeature-Brp6JZ9G.js";import"./memoryEstimations-Dm0CpiAe.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./timeSupport-_OTxVjJg.js";import"./AttributeBinsFeatureSet-DTaokSn9.js";import"./AttributeBinsQuery-CFZAjP8I.js";import"./queryUtils-B-qlVXq5.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-BrHHBKTN.js";import"./LayerView-C_fE5Gya.js";import"./layerViewUtils-84jomogG.js";import"./TechniqueInstance-frrMCpoj.js";import"./UpdateTracking2D-CIAzyST6.js";import"./BidiEngine-QXap_35O.js";import"./GeometryUtils-B-_R_0rK.js";import"./rasterizingUtils-DyWbCVZz.js";import"./floatRGBA-D0eYGs6i.js";import"./Rect-CUzevAry.js";import"./Utils-C6mgzdKP.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-D9KDBuGm.js";import"./ProgramTemplate-C9c6I2Ak.js";import"./TileContainer-C0-M9uwo.js";import"./WGLContainer-BIWWr_St.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-DXQNBBcR.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-DqN5dNbq.js";import"./TechniqueType-CFPo0AVB.js";import"./GraphShaderModule-BMCI3D2d.js";import"./ShaderBuilder-BReWRLrh.js";import"./BindType-BBwFZqyN.js";import"./utils-CRoiphGL.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-DeLO-hcP.js";import"./CircularArray-CujHzHWW.js";import"./SDFHelper-D53z4geg.js";import"./constants-B4mRqufT.js";import"./bundle-D2hyHz7d.js";import"./floorFilterUtils-DKzVzLpH.js";import"./popupUtils-Di2ruXUH.js";import"./RefreshableLayerView-DVAYTfBC.js";let i=class extends g{initialize(){this.addHandles([s(()=>this.view.scale,()=>this._update(),n)],"constructor")}isUpdating(){const t=this.layer.sublayers.some(a=>a.renderer!=null),r=this._commandsQueue.updateTracking.updating,o=this._updatingRequiredPromise!=null,p=!this._workerProxy,m=this.dataUpdating,e=t&&(r||o||p||m);return d("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${e}
  -> hasRenderer ${t}
  -> hasPendingCommand ${r}
  -> updatingRequiredFields ${o}
  -> updatingProxy ${p}
  -> updatingPipeline ${m}
`),e}};i=u([l("esri.views.2d.layers.SubtypeGroupLayerView2D")],i);const si=i;export{si as default};
