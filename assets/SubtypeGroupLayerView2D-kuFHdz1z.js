import{a4 as s,a5 as n,bi as d,r as u,y as l}from"./index-BOwmS6EZ.js";import{c as g}from"./FeatureLayerView2D-C38Gz-bo.js";import"./Container-Dd0tx3Kf.js";import"./featureConversionUtils-BUvKjWQj.js";import"./OptimizedFeature-CeT5yRcH.js";import"./memoryEstimations-iuMSXS9J.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./timeSupport-D86OSUxa.js";import"./AttributeBinsFeatureSet-Qztfp8ju.js";import"./AttributeBinsQuery-Od1lAVxq.js";import"./queryUtils-BMZ6dPdf.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-B4TTidgr.js";import"./LayerView-CmXG9K54.js";import"./layerViewUtils-CZ__Ca56.js";import"./TechniqueInstance-Dm0bO55L.js";import"./UpdateTracking2D-DHaat2TX.js";import"./BidiEngine-QXap_35O.js";import"./GeometryUtils-aBFu6nbO.js";import"./rasterizingUtils-BIlcPoez.js";import"./floatRGBA-BAe51B3Z.js";import"./Rect-CUzevAry.js";import"./Utils-DJx9_CRb.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-BmueokIX.js";import"./ProgramTemplate-9Q6CqnxS.js";import"./TileContainer-Djjc09qM.js";import"./WGLContainer-D8iJEhd4.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-b7Xhm5b8.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-CB9zrhzG.js";import"./TechniqueType-CFPo0AVB.js";import"./GraphShaderModule-DjqsQhH6.js";import"./ShaderBuilder-Dd8WKw_t.js";import"./BindType-BBwFZqyN.js";import"./utils-Bxzy_FUM.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-CAm8ic82.js";import"./CircularArray-CujHzHWW.js";import"./SDFHelper-a8lmPZwI.js";import"./constants-B4mRqufT.js";import"./bundle-D2hyHz7d.js";import"./floorFilterUtils-DKzVzLpH.js";import"./popupUtils-lRTGN2RG.js";import"./RefreshableLayerView-D9jvMbsv.js";let i=class extends g{initialize(){this.addHandles([s(()=>this.view.scale,()=>this._update(),n)],"constructor")}isUpdating(){const t=this.layer.sublayers.some(a=>a.renderer!=null),r=this._commandsQueue.updateTracking.updating,o=this._updatingRequiredPromise!=null,p=!this._workerProxy,m=this.dataUpdating,e=t&&(r||o||p||m);return d("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${e}
  -> hasRenderer ${t}
  -> hasPendingCommand ${r}
  -> updatingRequiredFields ${o}
  -> updatingProxy ${p}
  -> updatingPipeline ${m}
`),e}};i=u([l("esri.views.2d.layers.SubtypeGroupLayerView2D")],i);const si=i;export{si as default};
