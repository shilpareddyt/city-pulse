import{bq as p,s as m,aA as s}from"./index-DeoyqcX0.js";import{p as n}from"./MeshVertexAttributes-DVj4wUfS.js";import{B as a}from"./vertexSpaceConversion-BTniOgpT.js";import"./meshProperties-B4vupnXI.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-BpmeAaBX.js";import"./computeTranslationToOriginAndRotation-DzpGlMF8.js";import"./projectPointToVector-c7AnZWrG.js";import"./meshVertexSpaceUtils-gWkwIQ4H.js";import"./MeshLocalVertexSpace-D85vWFW-.js";import"./vec3-D85zq7Xa.js";import"./BufferView-CetvFxWO.js";import"./vec4-DBpvaSqR.js";async function E(t,r,o){await Promise.resolve(),p(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),r);return i.transform=null,i}export{E as convertMeshVertexSpace};
