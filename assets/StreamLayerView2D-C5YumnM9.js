import{r as s,v as o,hq as h,y as m,a4 as u,s as c,gV as d,Z as y,a6 as l,eU as _}from"./index-BOwmS6EZ.js";import{n as g,c as f}from"./FeatureLayerView2D-C38Gz-bo.js";import"./Container-Dd0tx3Kf.js";import"./featureConversionUtils-BUvKjWQj.js";import"./OptimizedFeature-CeT5yRcH.js";import"./memoryEstimations-iuMSXS9J.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./timeSupport-D86OSUxa.js";import"./AttributeBinsFeatureSet-Qztfp8ju.js";import"./AttributeBinsQuery-Od1lAVxq.js";import"./queryUtils-BMZ6dPdf.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-B4TTidgr.js";import"./LayerView-CmXG9K54.js";import"./layerViewUtils-CZ__Ca56.js";import"./TechniqueInstance-Dm0bO55L.js";import"./UpdateTracking2D-DHaat2TX.js";import"./BidiEngine-QXap_35O.js";import"./GeometryUtils-aBFu6nbO.js";import"./rasterizingUtils-BIlcPoez.js";import"./floatRGBA-BAe51B3Z.js";import"./Rect-CUzevAry.js";import"./Utils-DJx9_CRb.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-BmueokIX.js";import"./ProgramTemplate-9Q6CqnxS.js";import"./TileContainer-Djjc09qM.js";import"./WGLContainer-D8iJEhd4.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-b7Xhm5b8.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-CB9zrhzG.js";import"./TechniqueType-CFPo0AVB.js";import"./GraphShaderModule-DjqsQhH6.js";import"./ShaderBuilder-Dd8WKw_t.js";import"./BindType-BBwFZqyN.js";import"./utils-Bxzy_FUM.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-CAm8ic82.js";import"./CircularArray-CujHzHWW.js";import"./SDFHelper-a8lmPZwI.js";import"./constants-B4mRqufT.js";import"./bundle-D2hyHz7d.js";import"./floorFilterUtils-DKzVzLpH.js";import"./popupUtils-lRTGN2RG.js";import"./RefreshableLayerView-D9jvMbsv.js";const v=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([o()],t.prototype,"_isUserPaused",void 0),s([o({readOnly:!0})],t.prototype,"connectionStatus",null),s([o({type:h})],t.prototype,"filter",void 0),t=s([m("esri.views.layers.StreamLayerView")],t),t};let n=class extends v(f){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([u(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),u(()=>this.layer.purgeOptions,()=>this._update()),u(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new c("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return d(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return y(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new c("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return g(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(p=>{const a=l.fromJSON(p);return a.features.forEach(i=>{i.layer=this.layer,i.sourceLayer=this.layer}),a}),new l({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(_)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval==null&&(this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval))}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([o()],n.prototype,"pipelineConnectionStatus",void 0),s([o()],n.prototype,"pipelineErrorString",void 0),s([o({readOnly:!0})],n.prototype,"connectionError",null),s([o({readOnly:!0})],n.prototype,"_streamConnectionStatus",null),n=s([m("esri.views.2d.layers.StreamLayerView2D")],n);const de=n;export{de as default};
