import{r as t,v as o,gr as h,y as m,l as y,bx as j,D as w,G as g,F as x,H as O}from"./index-CLxXbLZV.js";import{t as S}from"./utils-CVTG11Xv.js";import"./applyEditsUtils-CZL9ZTeM.js";import"./MeshTransform-C7VUXxbo.js";import"./mat4f64-q_b6UJoq.js";import"./quat-DFaPWhch.js";import"./mat3f64-B5o_lm6j.js";import"./quatf64-aQ5IuZRd.js";import"./axisAngleDegrees-DdwcwKM_.js";import"./editingSupport-B5FryZbi.js";let s=class extends y{constructor(i){super(i),this.error=null,this.geometry=null,this.name=null}};t([o({type:Object})],s.prototype,"error",void 0),t([o({type:h})],s.prototype,"geometry",void 0),t([o({type:String})],s.prototype,"name",void 0),s=t([m("esri.rest.networks.circuits.support.CircuitVerifyResult")],s);const u=s;let r=class extends y{constructor(e){super(e),this.circuits=[],this.moment=null,this.exceededTransferLimit=!1,this.serviceEdits=null}readServiceEdits(e,p){return S(e)}};t([o({type:[u],json:{type:[u],write:!0}})],r.prototype,"circuits",void 0),t([o({type:Date,json:{type:Number,write:{writer:(i,e)=>{e.moment=i?i.getTime():null}}}})],r.prototype,"moment",void 0),t([o({type:Boolean,json:{type:Boolean,write:!0}})],r.prototype,"exceededTransferLimit",void 0),t([o({type:[Object],json:{type:[Object],write:!0}})],r.prototype,"serviceEdits",void 0),t([j("serviceEdits")],r.prototype,"readServiceEdits",null),r=t([m("esri.rest.networks.circuits.support.VerifyCircuitsResult")],r);async function R(i,e,p){const c=w(i),n=e.toJSON();e.circuits&&(n.circuits=JSON.stringify(e.circuits));const a={...n,f:"json"},l=g({...c.query,...a}),d=x(l,{...p,method:"post"}),f=`${c.path}/circuits/verify`,{data:v}=await O(f,d);return r.fromJSON(v)}export{R as verifyCircuits};
